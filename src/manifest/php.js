/**
 * manifest/php.js
 *
 * rollup-plugin-external-bundle
 */

const { ManifestBase } = require("./base");

function generatePhpScalar(value) {
  if (typeof value === "number") {
    return value.toString();
  }

  let s = value.toString();
  s = s.replace("\\","\\\\");
  s = s.replace("'","\\'");
  return `'${s}'`;
}

function generatePhpArray(value,_indent) {
  const indent = _indent || 0;

  if (Array.isArray(value)) {
    const mapped = value.map((x) => generatePhpArray(x,indent+2));
    let blob = "array(";
    if (mapped.length > 0) {
      blob += "\n";
    }
    for (let i = 0;i < mapped.length;++i) {
      blob += " ".repeat(indent+2) + mapped[i] + ",\n";
    }
    blob += " ".repeat(indent) + ")";
    return blob;
  }

  if (typeof value === "object") {
    let blob = "array(";
    if (Object.keys(value).length > 0) {
      blob += "\n";
    }
    for (const key in value) {
      blob += " ".repeat(indent+2)
        + generatePhpScalar(key)
        + " => "
        + generatePhpArray(value[key],indent+2)
        + ",\n";
    }
    blob += " ".repeat(indent) + ")";
    return blob;
  }

  return generatePhpScalar(value);
}

class PhpManifest extends ManifestBase {
  constructor(refs,options) {
    super("php",refs,options.sections);
    this.fileName = options.fileName || "manifest.php";
  }

  async generate() {
    const manifestArray = generatePhpArray(this.sections);
    let blob = `<?php

/**
 * ${this.fileName}
 *
 * This manifest was automatically generated by a build process.
 */

return ${manifestArray};
`;

    return blob;
  }
}

module.exports = {
  PhpManifest
};
